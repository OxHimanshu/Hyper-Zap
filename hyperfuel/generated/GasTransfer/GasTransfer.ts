// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Received extends ethereum.Event {
  get params(): Received__Params {
    return new Received__Params(this);
  }
}

export class Received__Params {
  _event: Received;

  constructor(event: Received) {
    this._event = event;
  }

  get origin(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get body(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Sent extends ethereum.Event {
  get params(): Sent__Params {
    return new Sent__Params(this);
  }
}

export class Sent__Params {
  _event: Sent;

  constructor(event: Sent) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destinationChainSelector(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sourceChainSelector(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get fees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get message(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class GasTransfer__getFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class GasTransfer extends ethereum.SmartContract {
  static bind(address: Address): GasTransfer {
    return new GasTransfer("GasTransfer", address);
  }

  addressToBytes32(_addr: Address): Bytes {
    let result = super.call(
      "addressToBytes32",
      "addressToBytes32(address):(bytes32)",
      [ethereum.Value.fromAddress(_addr)]
    );

    return result[0].toBytes();
  }

  try_addressToBytes32(_addr: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addressToBytes32",
      "addressToBytes32(address):(bytes32)",
      [ethereum.Value.fromAddress(_addr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bytes32ToAddress(_buf: Bytes): Address {
    let result = super.call(
      "bytes32ToAddress",
      "bytes32ToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_buf)]
    );

    return result[0].toAddress();
  }

  try_bytes32ToAddress(_buf: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bytes32ToAddress",
      "bytes32ToAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_buf)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  destChainNativeTokenUsdAmount(): BigInt {
    let result = super.call(
      "destChainNativeTokenUsdAmount",
      "destChainNativeTokenUsdAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_destChainNativeTokenUsdAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "destChainNativeTokenUsdAmount",
      "destChainNativeTokenUsdAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gasAmount(): BigInt {
    let result = super.call("gasAmount", "gasAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gasAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gasAmount", "gasAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeposits(user: Address): BigInt {
    let result = super.call("getDeposits", "getDeposits(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getDeposits(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeposits",
      "getDeposits(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFee(amount: BigInt): GasTransfer__getFeeResult {
    let result = super.call("getFee", "getFee(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return new GasTransfer__getFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getFee(amount: BigInt): ethereum.CallResult<GasTransfer__getFeeResult> {
    let result = super.tryCall("getFee", "getFee(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GasTransfer__getFeeResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getGasQuote(domain: BigInt): BigInt {
    let result = super.call("getGasQuote", "getGasQuote(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(domain)
    ]);

    return result[0].toBigInt();
  }

  try_getGasQuote(domain: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getGasQuote", "getGasQuote(uint32):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(domain)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLatestData(): BigInt {
    let result = super.call("getLatestData", "getLatestData():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLatestData(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestData",
      "getLatestData():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalRewards(user: Address): BigInt {
    let result = super.call(
      "getTotalRewards",
      "getTotalRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getTotalRewards(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalRewards",
      "getTotalRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUsdBalance(): BigInt {
    let result = super.call("getUsdBalance", "getUsdBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getUsdBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUsdBalance",
      "getUsdBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sourceChainSelector(): BigInt {
    let result = super.call(
      "sourceChainSelector",
      "sourceChainSelector():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_sourceChainSelector(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sourceChainSelector",
      "sourceChainSelector():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewards(): BigInt {
    let result = super.call("totalRewards", "totalRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRewards", "totalRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStaked(): BigInt {
    let result = super.call("totalStaked", "totalStaked():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStaked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStaked", "totalStaked():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dataFeed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _mailbox(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _igp(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _iqsRouter(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _sourceChainSelector(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get withdrawAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class BridgeGasCall extends ethereum.Call {
  get inputs(): BridgeGasCall__Inputs {
    return new BridgeGasCall__Inputs(this);
  }

  get outputs(): BridgeGasCall__Outputs {
    return new BridgeGasCall__Outputs(this);
  }
}

export class BridgeGasCall__Inputs {
  _call: BridgeGasCall;

  constructor(call: BridgeGasCall) {
    this._call = call;
  }

  get destinationChainSelector(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BridgeGasCall__Outputs {
  _call: BridgeGasCall;

  constructor(call: BridgeGasCall) {
    this._call = call;
  }
}

export class CallbackInitateBridgeCall extends ethereum.Call {
  get inputs(): CallbackInitateBridgeCall__Inputs {
    return new CallbackInitateBridgeCall__Inputs(this);
  }

  get outputs(): CallbackInitateBridgeCall__Outputs {
    return new CallbackInitateBridgeCall__Outputs(this);
  }
}

export class CallbackInitateBridgeCall__Inputs {
  _call: CallbackInitateBridgeCall;

  constructor(call: CallbackInitateBridgeCall) {
    this._call = call;
  }

  get nativeTokenUsdAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get destinationChainSelector(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get quote(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get destNativeTokenUsdAmount(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CallbackInitateBridgeCall__Outputs {
  _call: CallbackInitateBridgeCall;

  constructor(call: CallbackInitateBridgeCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class HandleCall extends ethereum.Call {
  get inputs(): HandleCall__Inputs {
    return new HandleCall__Inputs(this);
  }

  get outputs(): HandleCall__Outputs {
    return new HandleCall__Outputs(this);
  }
}

export class HandleCall__Inputs {
  _call: HandleCall;

  constructor(call: HandleCall) {
    this._call = call;
  }

  get _origin(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sender(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _body(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class HandleCall__Outputs {
  _call: HandleCall;

  constructor(call: HandleCall) {
    this._call = call;
  }
}

export class SafeBridgeGasCall extends ethereum.Call {
  get inputs(): SafeBridgeGasCall__Inputs {
    return new SafeBridgeGasCall__Inputs(this);
  }

  get outputs(): SafeBridgeGasCall__Outputs {
    return new SafeBridgeGasCall__Outputs(this);
  }
}

export class SafeBridgeGasCall__Inputs {
  _call: SafeBridgeGasCall;

  constructor(call: SafeBridgeGasCall) {
    this._call = call;
  }

  get destinationChainSelector(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SafeBridgeGasCall__Outputs {
  _call: SafeBridgeGasCall;

  constructor(call: SafeBridgeGasCall) {
    this._call = call;
  }
}
